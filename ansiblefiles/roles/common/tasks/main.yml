---
# グループ、ユーザー、権限の設定
- name       : グループ作成
  group      :
    name     : "{{ item.value.groups }}"
  with_dict  : "{{ linux_newusers }}"  # see group_vars/all.yml

- name       : 新規ユーザー作成
  user       :
    name     : "{{ item.key }}"
    password : "{{ item.value.pass }}"
    shell    : "{{ item.value.shell }}"
    home     : /home/"{{ item.key }}"
    state    : present
  with_dict  : "{{ linux_newusers }}"  # see group_vars/all.yml

- name       : システム権限の付与
  template   :
    src      : "{{ item.value.priv }}_sudoers.j2"
    dest     : /etc/sudoers.d/{{ item.key }}
    owner    : root
    group    : root
    mode     : 0400
    validate : 'visudo -c -f %s'  # エラー時には処理を止める
  with_dict  : "{{ linux_newusers }}"

# yumリポジトリの登録
- name    : EPELリポジトリをインストール
  yum     :
    name  : epel-release
    state : installed

- name    : Remiリポジトリをインストール
  yum     :
    name  : http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
    state : installed

# selinux
- name    : libselinux-pythonインストール
  yum     :
    name  : libselinux-python
    state : installed

- name    : SELinux無効化
  selinux :
    state : disabled

# ロケール
- name        : ロケール設定
  command     : localectl set-locale LANG={{ locale }}  # see group_vars/all.yml

# タイムゾーン
- name        : タイムゾーン設定
  timezone    :
    name      : "{{ timezone }}"  # see group_vars/all.yml

# キーボードマップ
- name        : キーボードマップ設定
  command     : localectl set-keymap {{ keymap }}  # see group_vars/all.yml

# ntp
- name      : ntpインストール
  yum       :
    name    : ntp
    state   : installed

- name      : ntpdが起動中か確認
  shell     : "service ntpd status | grep -q 停止; echo $?"
  register  : result

- name      : ntpdate実行 (ntpd停止中の場合)
  command   : ntpdate {{ ntp_servers.0 }}       # see group_vars/all.yml
  when      : result.stdout == "0"

- name      : テンプレートを/etc/ntp.confにコピー
  notify    : ntpd再起動
  template  :
    src     : ntp.conf.j2
    dest    : /etc/ntp.conf

- name      : ntpd起動
  service   :
    name    : ntpd
    state   : started
    enabled : yes

# utility tools
- name        : wgetをインストール
  yum         :
    name      : wget
    state     : installed

- name        : vim-enhancedをインストール
  yum         :
    name      : vim-enhanced
    state     : installed

- name        : nkfをインストール
  yum         :
    name      : nkf
    state     : installed

- name        : treeをインストール
  yum         :
    name      : tree
    state     : installed

- name        : mlocateをインストール
  yum         :
    name      : mlocate
    state     : installed

- name        : Development toolsをインストール
  yum         :
    name      : "@Development tools"
    state     : installed

- name        : updatedbコマンド実行
  shell       : updatedb

# Gitをインストール
- name        : Gitが依存するライブラリをインストール
  yum         :
    name      : "{{ item }}"
    state     : installed
  with_items  :
    - gettext-devel
    - expat-devel
    - curl-devel
    - zlib-devel
    - perl-devel
    - openssl-devel
    - subversion-perl
    - make
    - gcc

- name: インストールするGitのバージョンを取得
  command: >
    git --version
    warn=no
  changed_when: false
  failed_when: false
  check_mode: no
  register: git_installed_version

- name: インストールしたいバージョンとインストール済のバージョンが違った場合、強制的にGitをインストールする
  set_fact:
    git_reinstall_from_source: true
  when:
    - git_install_from_source_force_update
    - git_installed_version|success and (git_installed_version.stdout | regex_replace("^.*?([0-9\.]+)$", "\\1") | version_compare(git_version, operator="!="))

- name: Gitのソースコードをダウンロードする
  get_url:
    url: "https://www.kernel.org/pub/software/scm/git/git-{{ git_version }}.tar.gz"
    dest: "{{ git_workspace }}/git-{{ git_version }}.tar.gz"
  when:  git_installed_version|failed or git_reinstall_from_source

- name: 解凍する
  unarchive:
    src: "{{ git_workspace }}/git-{{ git_version }}.tar.gz"
    dest: "{{ git_workspace }}"
    creates: "{{ git_workspace }}/git-{{ git_version }}/README"
    copy: no
  when:  git_installed_version|failed or git_reinstall_from_source

- name: Gitをビルドする
  command: >
    make prefix={{ git_install_path }} {{ item }}
    chdir={{ git_workspace }}/git-{{ git_version }}
  with_items:
    - all
    - install
  when:  git_installed_version|failed or git_reinstall_from_source
  become: yes

# Jenkins
# - name        : open JDK をインストール
#   yum         :
#     name      : java-1.6.0-openjdk
#     state     : latest

# - name        : Jenkinsのリポジトリを取得
#   get_url     :
#     url       : http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo
#     dest      : /etc/yum.repos.d/jenkins.repo

# - name        : Jenkinsリポジトリのキーをインポート
#   rpm_key     :
#     key       : http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key

# - name        : Jenkinsをインストール
#   yum         :
#     name      : jenkins
#     state     : latest

# - name        : Jenkinsを起動
#   service     :
#     name      : jenkins
#     state     : started
#     enabled   : yes
